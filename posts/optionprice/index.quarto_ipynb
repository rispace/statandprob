{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9551c4ae",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Pricing Derivatives Using Black-Scholes-Merton Model\"\n",
    "date: \"11/12/2023\"\n",
    "author: Rafiq Islam\n",
    "categories: [Programming, Finance, Financial Mathematics, Pricing, Hedging]\n",
    "citation: true\n",
    "search: true\n",
    "image: bsm.png\n",
    "lightbox: true\n",
    "listing: \n",
    "    contents: \"/../../posts\"\n",
    "    max-items: 3\n",
    "    type: grid\n",
    "    categories: true\n",
    "    date-format: full\n",
    "    fields: [image, date, title, author, reading-time]\n",
    "format: \n",
    "    html: default\n",
    "    ipynb: default\n",
    "    docx: \n",
    "      toc: true\n",
    "      adsense:\n",
    "        enable-ads: false\n",
    "    epub:\n",
    "      toc: true\n",
    "      adsense:\n",
    "        enable-ads: false\n",
    "    pdf: \n",
    "      toc: true\n",
    "      pdf-engine: pdflatex\n",
    "      adsense:\n",
    "        enable-ads: false\n",
    "      number-sections: false\n",
    "      colorlinks: true\n",
    "      cite-method: biblatex\n",
    "toc-depth: 4\n",
    "---   \n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this blog, we will explore how to price simple equity derivatives using the Black-Scholes-Merton (BSM) model. We will derive the mathematical formula and then provide Python code to implement it.   \n",
    "\n",
    "### Background and Preliminaries  \n",
    "Before proceeding to the deep of the discussion, we need to know some definition and terminology \n",
    "\n",
    "<p style=\"text-align: justify\">\n",
    "**Brownian Motion:**  Brownian motion is a concept with definitions and applications across various disciplines, named after the botanist Robert Brown, is the random, erratic movement of particles suspended in a fluid (liquid or gas) due to their collisions with the fast-moving molecules of the fluid.</p>  \n",
    "\n",
    "*Brownian motion is a stochastic process $(B_t)_{t \\geq 0}$ defined as a continuous-time process with the following properties:*  \n",
    "\n",
    "- $B_0 = 0$ almost surely.\n",
    "- $B_t$ has independent increments.\n",
    "- For $t > s$, $B_t - B_s \\sim N(0, t-s)$ (normally distributed with mean 0 and variance $t-s$).\n",
    "- $B_t$ has continuous paths almost surely.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf03d9c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2370x1170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| code-fold: true\n",
    "from mywebstyle import plot_style\n",
    "plot_style('#f4f4f4')\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Parameters\n",
    "n_steps = 100  # Number of steps\n",
    "n_paths = 20   # Number of paths\n",
    "time_horizon = 1  # Total time\n",
    "dt = time_horizon / n_steps  # Time step\n",
    "t = np.linspace(0, time_horizon, n_steps)  # Time array\n",
    "\n",
    "# Generate Brownian motion\n",
    "def generate_brownian_paths(n_paths, n_steps, dt):\n",
    "    # Standard normal increments scaled by sqrt(dt)\n",
    "    increments = np.random.normal(0, np.sqrt(dt), (n_paths, n_steps))\n",
    "    # Cumulative sum to generate paths\n",
    "    return np.cumsum(increments, axis=1)\n",
    "\n",
    "# Generate one path and multiple paths\n",
    "single_path = generate_brownian_paths(1, n_steps, dt)[0]\n",
    "multiple_paths = generate_brownian_paths(n_paths, n_steps, dt)\n",
    "\n",
    "# Plotting\n",
    "fig, axes = plt.subplots(1, 2, figsize=(7.9, 3.9))\n",
    "\n",
    "# Single path\n",
    "axes[0].plot(t, single_path, label=\"Single Path\")\n",
    "axes[0].set_title(\"Brownian Motion: Single Path\")\n",
    "axes[0].set_xlabel(\"Time\")\n",
    "axes[0].set_ylabel(\"Position\")\n",
    "axes[0].legend()\n",
    "\n",
    "# Multiple paths\n",
    "for path in multiple_paths:\n",
    "    axes[1].plot(t, path, alpha=0.5, linewidth=0.8)\n",
    "axes[1].set_title(f\"Brownian Motion: {n_paths} Paths\")\n",
    "axes[1].set_xlabel(\"Time\")\n",
    "axes[1].set_ylabel(\"Position\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79688b11",
   "metadata": {},
   "source": [
    "**Geometric Brownian Motion (GBM)**  \n",
    "A stochastic process $S_t$ is said to follow a geometric Brownian motion if it satisfies the following equation:  \n",
    "$$\n",
    "dS_t = \\mu S_t dt+\\sigma S_t dB_t\n",
    "$$  \n",
    "\n",
    "Which can be written as  \n",
    "$$\n",
    "S_t - S_0 =\\int_0^t \\mu S_u du + \\int_0^t \\sigma S_u dB_u\n",
    "$$  \n",
    "\n",
    "To solve the GBM, we apply Ito's formula to the function $Z_t = f(t, S_t)= \\ln(S_t)$ and then by Taylor's expansion, we have \n",
    "\n",
    "\\begin{align*}\n",
    "df & = \\frac{\\partial f}{\\partial t}dt+ \\frac{\\partial f}{\\partial s}dS_t + \\frac{1}{2} \\frac{\\partial ^2f}{\\partial s^2}(dS_t)^2+\\frac{1}{2}\\frac{\\partial ^2f}{\\partial s^2}(dt)^2+\\frac{\\partial^2 f}{\\partial t\\partial s}dtdS_t\n",
    "\\end{align*}  \n",
    "\n",
    "By definition we have \n",
    "\\begin{align*}\n",
    "dS_t &= \\mu S_t dt+\\sigma S_t dB_t\\\\\n",
    "(dS_t)^2 & = \\mu^2 (dt)^2+2\\mu \\sigma dt dB_t + \\sigma^2 (dB_t)^2\n",
    "\\end{align*}  \n",
    "\n",
    "The term $(dt)^2$ is negligible compared to the term $dt$ and it is also assume that the product $dtdB_t$ is negligible. Furthermore, the quadratic variation of $B_t$ i.e., $(dB_t)^2= dt$. With these values, we obtain \n",
    "\n",
    "\\begin{align*}\n",
    "dZ_t & = \\frac{1}{S_t} dS_t + \\frac{1}{2} \\left\\{-\\frac{1}{S_t^2}\\right\\}[dS_t]^2\\\\\n",
    "& =  \\frac{1}{S_t} (\\mu S_t dt+\\sigma S_t dB_t) + \\frac{1}{2} \\left\\{-\\frac{1}{S_t^2}\\right\\}\\sigma^2S_t^2dt\\\\\n",
    "\\implies dZ_t &= (\\mu dt +\\sigma dB_t) -\\frac{1}{2}\\sigma^2 dt\\\\\n",
    "& = \\left(\\mu-\\frac{1}{2}\\sigma^2\\right)dt+\\sigma dB_t\n",
    "\\end{align*}  \n",
    "\n",
    "with $Z_0=\\ln S_0$. Now we have the following  \n",
    "\\begin{align*}\n",
    "\\int_0^t dZ_s &= \\int_0^t \\left(\\mu-\\frac{1}{2}\\sigma^2\\right)ds + \\int_0^t\\sigma dB_s\\\\\n",
    "\\implies Z_t - Z_0 &= \\left(\\mu-\\frac{1}{2}\\sigma^2\\right)t + \\sigma B_t\\\\\n",
    "\\implies \\ln S_t - \\ln S_0&= \\left(\\mu-\\frac{1}{2}\\sigma^2\\right)t + \\sigma B_t\\\\\n",
    "\\implies \\ln \\left(\\frac{S_t}{S_0}\\right) &= \\left(\\mu-\\frac{1}{2}\\sigma^2\\right)t + \\sigma B_t\\\\\n",
    "\\implies S_t &= S_0 \\exp{\\left\\{\\left(\\mu-\\frac{1}{2}\\sigma^2\\right)t + \\sigma B_t\\right\\}}\n",
    "\\end{align*}\n",
    "\n",
    "## Black-Scholes-Merton Formula  \n",
    "\n",
    "Now we are ready to derive the BSM PDE. The payoff of an *option* $V(S,T)$ at maturity is is known. To find the value at an earlier stage, we need to know how V behaves as a function of $S$ and $t$. By Ito's lemma we have \n",
    "\\begin{align*}\n",
    "dV& = \\left(\\mu S\\frac{\\partial V}{\\partial S}+\\frac{\\partial V}{\\partial t}+\\frac{1}{2}\\sigma^2S^2\\frac{\\partial^2 V}{\\partial S^2}\\right)dt+\\sigma S\\frac{\\partial V}{\\partial S}dB.\n",
    "\\end{align*}  \n",
    "\n",
    "Now let's consider a portfolio consisting of a short one option and long $\\frac{\\partial V}{\\partial S}$ shares at time $t$. The value of this portfolio is \n",
    "\n",
    "$$\n",
    "\\Pi = -V+\\frac{\\partial V}{\\partial S}S\n",
    "$$  \n",
    "\n",
    "over the time $[t,t+\\Delta t]$, the total profit or loss from the changes in the values of the portfolio is \n",
    "$$\n",
    "\\Delta \\Pi = -\\Delta V + \\frac{\\partial V}{\\partial S}\\Delta S\n",
    "$$  \n",
    "\n",
    "Now by the discretization we have, \n",
    "\\begin{align*}\n",
    "\\Delta S &= \\mu S \\Delta t +\\sigma S \\Delta B\\\\\n",
    "\\Delta V & = \\left(\\mu S\\frac{\\partial V}{\\partial S}+\\frac{\\partial V}{\\partial t}+\\frac{1}{2}\\sigma^2S^2\\frac{\\partial^2 V}{\\partial S^2}\\right)\\Delta t+\\sigma S\\frac{\\partial V}{\\partial S}\\Delta B\\\\\n",
    "\\implies \\Delta \\Pi  & = \\left(-\\frac{\\partial V}{\\partial t} -\\frac{1}{2}\\sigma^2S^2\\frac{\\partial^2 V}{\\partial S^2}\\right)\\Delta t\n",
    "\\end{align*}\n",
    "\n",
    "At this point, if $r$ is the risk-free interest rate then we will have following relationship \n",
    "$$\n",
    "r\\Pi \\Delta t = \\Delta \\Pi \n",
    "$$ \n",
    "\n",
    "The rationale of this relation is that no-aribtrage assumption. Thus, we have  \n",
    "\\begin{align*}\n",
    "\\left(-\\frac{\\partial V}{\\partial t} -\\frac{1}{2}\\sigma^2S^2\\frac{\\partial^2 V}{\\partial S^2}\\right)\\Delta t & = r \\left(- V + \\frac{\\partial V}{\\partial S} S\\right)\\Delta t \\\\\n",
    "\\implies \\frac{\\partial V}{\\partial t} + \\frac{1}{2} \\sigma^2 S^2 \\frac{\\partial^2 V}{\\partial S^2} + rS \\frac{\\partial V}{\\partial S} -rV &=0\n",
    "\\end{align*}  \n",
    "\n",
    "This is the famous Black-Scholes-Merton PDF, formally written with the boundary conditions as follows  \n",
    "\n",
    "\\begin{align*}\n",
    "\\frac{\\partial c}{\\partial t} + \\frac{1}{2} \\sigma^2 c^2 \\frac{\\partial^2 c}{\\partial S^2} + rc \\frac{\\partial c}{\\partial S} -rc &=0\\\\\n",
    "c(0,t) &= 0\\\\ \n",
    "c(S_{+\\infty}, t) &= S - Ke^{-r(T-t)}\\\\\n",
    "c(S,T) & = max\\{S-K,0\\}\n",
    "\\end{align*}  \n",
    "\n",
    "This Black-Scholes-Merton PDE can be reduced to the heat equation using the substitutions $S = K e^x$, $t = T - \\frac{\\tau}{\\frac{1}{2} \\sigma^2}$, and $c(S, t) = K v(x, \\tau)$. Let’s derive the solution step by step in full mathematical detail and show how this leads to the normal CDF.\n",
    "\n",
    "#### Step 1: Substitutions\n",
    "We aim to reduce the BSM PDE:\n",
    "$$\n",
    "\\frac{\\partial c}{\\partial t} + \\frac{1}{2} \\sigma^2 S^2 \\frac{\\partial^2 c}{\\partial S^2} + r S \\frac{\\partial c}{\\partial S} - r c = 0\n",
    "$$\n",
    "\n",
    "to the heat equation. Using the substitutions:\n",
    "\n",
    "- $S = K e^x$, where $x = \\ln(S / K)$, and $S \\in (0, \\infty)$ maps $x \\in (-\\infty, \\infty)$,\n",
    "- $t = T - \\frac{\\tau}{\\frac{1}{2} \\sigma^2}$, so $\\tau = \\frac{1}{2} \\sigma^2 (T - t)$,\n",
    "- $c(S, t) = K v(x, \\tau)$, where $v(x, \\tau)$ is the transformed function.\n",
    "\n",
    "#### Step 2: Derivative Transformations\n",
    "For $c(S, t) = K v(x, \\tau)$, we compute derivatives.\n",
    "\n",
    "1. The first derivative of $c$ with respect to $S$:\n",
    "   $$\n",
    "   \\frac{\\partial c}{\\partial S} = \\frac{\\partial}{\\partial S} \\big(K v(x, \\tau)\\big) = K \\frac{\\partial v}{\\partial x} \\frac{\\partial x}{\\partial S},\n",
    "   $$\n",
    "   where $x = \\ln(S / K)$ implies $\\frac{\\partial x}{\\partial S} = \\frac{1}{S}$. Thus:\n",
    "   $$\n",
    "   \\frac{\\partial c}{\\partial S} = K \\frac{\\partial v}{\\partial x} \\frac{1}{S}.\n",
    "   $$\n",
    "\n",
    "2. The second derivative of $c$ with respect to $S$:\n",
    "   $$\n",
    "   \\frac{\\partial^2 c}{\\partial S^2} = \\frac{\\partial}{\\partial S} \\left( K \\frac{\\partial v}{\\partial x} \\frac{1}{S} \\right).\n",
    "   $$\n",
    "   Using the product rule:\n",
    "   $$\n",
    "   \\frac{\\partial^2 c}{\\partial S^2} = K \\frac{\\partial^2 v}{\\partial x^2} \\frac{1}{S^2} - K \\frac{\\partial v}{\\partial x} \\frac{1}{S^2}.\n",
    "   $$\n",
    "\n",
    "3. The time derivative:\n",
    "   $$\n",
    "   \\frac{\\partial c}{\\partial t} = K \\frac{\\partial v}{\\partial \\tau} \\frac{\\partial \\tau}{\\partial t}, \\quad \\text{and } \\frac{\\partial \\tau}{\\partial t} = -\\frac{1}{\\frac{1}{2} \\sigma^2}.\n",
    "   $$\n",
    "\n",
    "#### Step 3: Transforming the PDE\n",
    "Substituting the above derivatives into the BSM PDE, we rewrite each term.\n",
    "\n",
    "1. For $\\frac{\\partial c}{\\partial t}$:\n",
    "   $$\n",
    "   \\frac{\\partial c}{\\partial t} = -\\frac{1}{\\frac{1}{2} \\sigma^2} K \\frac{\\partial v}{\\partial \\tau}.\n",
    "   $$\n",
    "\n",
    "2. For $\\frac{\\partial c}{\\partial S}$:\n",
    "   $$\n",
    "   S \\frac{\\partial c}{\\partial S} = S \\cdot \\left(K \\frac{\\partial v}{\\partial x} \\frac{1}{S}\\right) = K \\frac{\\partial v}{\\partial x}.\n",
    "   $$\n",
    "\n",
    "3. For $\\frac{\\partial^2 c}{\\partial S^2}$:\n",
    "   $$\n",
    "   \\frac{1}{2} \\sigma^2 S^2 \\frac{\\partial^2 c}{\\partial S^2} = \\frac{1}{2} \\sigma^2 S^2 \\left(K \\frac{\\partial^2 v}{\\partial x^2} \\frac{1}{S^2} - K \\frac{\\partial v}{\\partial x} \\frac{1}{S^2}\\right) = \\frac{1}{2} \\sigma^2 K \\frac{\\partial^2 v}{\\partial x^2}.\n",
    "   $$\n",
    "\n",
    "Substituting all these into the BSM PDE:\n",
    "$$\n",
    "-\\frac{1}{\\frac{1}{2} \\sigma^2} K \\frac{\\partial v}{\\partial \\tau} + \\frac{1}{2} \\sigma^2 K \\frac{\\partial^2 v}{\\partial x^2} + r K \\frac{\\partial v}{\\partial x} - r K v = 0.\n",
    "$$\n",
    "\n",
    "Divide through by $K$:\n",
    "$$\n",
    "-\\frac{\\partial v}{\\partial \\tau} + \\frac{\\partial^2 v}{\\partial x^2} + \\frac{2r}{\\sigma^2} \\frac{\\partial v}{\\partial x} - \\frac{2r}{\\sigma^2} v = 0.\n",
    "$$\n",
    "\n",
    "To simplify, let $v(x, \\tau) = e^{\\alpha x + \\beta \\tau} u(x, \\tau)$, where $\\alpha$ and $\\beta$ are constants. Substituting and choosing $\\alpha = -\\frac{r}{\\sigma^2}$ and $\\beta = -\\frac{r^2}{2 \\sigma^2}$, the equation reduces to:\n",
    "$$\n",
    "\\frac{\\partial u}{\\partial \\tau} = \\frac{\\partial^2 u}{\\partial x^2}.\n",
    "$$\n",
    "\n",
    "#### Step 4: Solving the Heat Equation\n",
    "The heat equation $\\frac{\\partial u}{\\partial \\tau} = \\frac{\\partial^2 u}{\\partial x^2}$ has a well-known solution using Fourier methods:\n",
    "$$\n",
    "u(x, \\tau) = \\frac{1}{\\sqrt{2 \\pi \\tau}} \\int_{-\\infty}^\\infty e^{-\\frac{(x-y)^2}{2\\tau}} f(y) \\, dy,\n",
    "$$\n",
    "\n",
    "where $f(y)$ is the initial condition.\n",
    "\n",
    "For the BSM problem, the initial condition is the payoff:\n",
    "$$\n",
    "f(y) = \\max(e^y - 1, 0).\n",
    "$$\n",
    "\n",
    "Performing the integration leads to the final solution involving the cumulative normal distribution function:\n",
    "$$\n",
    "v(x, \\tau) = N(d_1) - e^{-x} N(d_2),\n",
    "$$\n",
    "\n",
    "where:\n",
    "$$\n",
    "d_1 = \\frac{x + \\frac{1}{2} \\tau}{\\sqrt{\\tau}}, \\quad d_2 = \\frac{x - \\frac{1}{2} \\tau}{\\sqrt{\\tau}}.\n",
    "$$\n",
    "\n",
    "Transforming back to the original variables gives the Black-Scholes formula:\n",
    "$$\n",
    "C(S, t) = S e^{-q(T-t)} N(d_1) - K e^{-r(T-t)} N(d_2),\n",
    "$$\n",
    "where:\n",
    "$$\n",
    "d_1 = \\frac{\\ln(S / K) + (r - q + \\frac{\\sigma^2}{2})(T-t)}{\\sigma \\sqrt{T-t}}, \\quad d_2 = d_1 - \\sigma \\sqrt{T-t}.\n",
    "$$\n",
    "\n",
    "\n",
    "Similarly, we can derive the price of a European put option:\n",
    "\n",
    "$$\n",
    "P = K e^{-rT} N(-d_2) - S e^{-qT} N(-d_1)\n",
    "$$\n",
    "\n",
    "Where:\n",
    "$$\n",
    "d_1 = \\frac{\\ln(\\frac{S}{K}) + (r - q + \\frac{\\sigma^2}{2})T}{\\sigma \\sqrt{T}}, \\quad d_2 = d_1 - \\sigma \\sqrt{T}\n",
    "$$\n",
    "\n",
    "### Asymptotic Behavior of the BSM formula for call and put options  \n",
    "What if $K\\rightarrow 0$? In that case,  \n",
    "\n",
    "1. $\\ln(S_0/K)\\rightarrow \\infty$, causing $d_1 \\rightarrow \\infty$ and $d_2 \\rightarrow \\infty$  \n",
    "2. The cdf $N(d_1)\\rightarrow 1$ and $N(d_2)\\rightarrow 1$  \n",
    "3. The second term $Ke^{-rT}N(d_2)\\rightarrow 0$ as $K\\rightarrow 0$  \n",
    "\n",
    "In this case, the price of a call option $C\\rightarrow S_0$ and the price of a put option $P \\rightarrow 0$\n",
    "\n",
    "\n",
    "## Greeks: Delta and Gamma\n",
    "\n",
    "**Delta** ($\\Delta$) is the sensitivity of the option price to changes in the underlying asset price:\n",
    "\n",
    "$$\n",
    "\\Delta = \\frac{\\partial C}{\\partial S}\\approx \\frac{C(S_0 + h) - C(S_0 - h)}{2h}\n",
    "$$  \n",
    "\n",
    "This is the **central difference approximation**, which provides a more accurate estimate of delta compared to the forward or backward difference methods.\n",
    "\n",
    "- $C(S_0 + h)$: Calculate the option price with the spot price increased by $h$.\n",
    "- $C(S_0 - h)$: Calculate the option price with the spot price decreased by $h$.\n",
    "\n",
    "**Gamma** ($\\Gamma$) measures the rate of change of delta with respect to the underlying asset price:\n",
    "\n",
    "$$\n",
    "\\Gamma = \\frac{\\partial^2 C}{\\partial S^2}\\approx \\frac{\\Delta(S_0 + h) - \\Delta(S_0 - h)}{2h}\\approx \\frac{C(S_0 + h) - 2C(S_0) + C(S_0 - h)}{h^2}\n",
    "$$\n",
    "\n",
    "Gamma ($\\Gamma$) measures the rate of change of delta ($\\Delta$) with respect to the underlying spot price ($S_0$). \n",
    "\n",
    "- $C(S_0 + h)$: Option price with the spot price increased by $h$.\n",
    "- $C(S_0)$: Option price at the current spot price.\n",
    "- $C(S_0 - h)$: Option price with the spot price decreased by $h$.\n",
    "\n",
    "**Relationship Between Delta and Gamma:**  \n",
    "\n",
    "- Gamma represents how much delta changes for a small change in $S_0$.\n",
    "- If gamma is high, delta is more sensitive to changes in $S_0$, which is important for hedging strategies.\n",
    "\n",
    "## Implementation  \n",
    "\n",
    "### Notation \n",
    "\n",
    "- $S$: Spot price of the stock.\n",
    "- $K$: Strike price of the option.\n",
    "- $T$: Time to maturity (in years).\n",
    "- $r$: Risk-free rate (continuously compounded).\n",
    "- $q$: Dividend yield (continuously compounded).\n",
    "- $\\sigma$: Volatility of the stock.\n",
    "- $N(\\cdot)$: Cumulative distribution function of the standard normal distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bed78d89",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dataclasses import dataclass\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "\n",
    "@dataclass\n",
    "class Equity:\n",
    "    spot: float\n",
    "    dividend_yield: float\n",
    "    volatility: float\n",
    "\n",
    "@dataclass\n",
    "class EquityOption:\n",
    "    strike: float\n",
    "    time_to_maturity: float\n",
    "    put_call: str\n",
    "\n",
    "@dataclass\n",
    "class EquityForward:\n",
    "    strike: float\n",
    "    time_to_maturity: float\n",
    "\n",
    "def bsm(underlying: Equity, option: EquityOption, rate: float) -> float:\n",
    "    S = underlying.spot\n",
    "    K = option.strike\n",
    "    T = option.time_to_maturity\n",
    "    r = rate\n",
    "    q = underlying.dividend_yield\n",
    "    sigma = underlying.volatility\n",
    "\n",
    "    # Handle edge case where strike is effectively zero\n",
    "    if K < 1e-8:\n",
    "        if option.put_call.lower() == \"call\":\n",
    "            return S \n",
    "        else:\n",
    "            return 0.0\n",
    "\n",
    "    d1 = (np.log(S / K) + (r - q + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n",
    "    d2 = d1 - sigma * np.sqrt(T)\n",
    "\n",
    "    if option.put_call.lower() == \"call\":\n",
    "        price = S * np.exp(-q * T) * norm.cdf(d1) \\\n",
    "                - K * np.exp(-r * T) * norm.cdf(d2)\n",
    "    elif option.put_call.lower() == \"put\":\n",
    "        price = K * np.exp(-r * T) * norm.cdf(-d2) \\\n",
    "                - S * np.exp(-q * T) * norm.cdf(-d1)\n",
    "    else:\n",
    "        raise ValueError(\"Invalid option type. Must be 'call' or 'put'.\")\n",
    "\n",
    "    return price\n",
    "\n",
    "def delta(underlying: Equity, option: EquityOption, rate: float) -> float:\n",
    "    bump = 0.01 * underlying.spot\n",
    "    bumped_up = Equity(spot=underlying.spot + bump, \n",
    "                       dividend_yield=underlying.dividend_yield, \n",
    "                       volatility=underlying.volatility)\n",
    "    bumped_down = Equity(spot=underlying.spot - bump, \n",
    "                         dividend_yield=underlying.dividend_yield, \n",
    "                         volatility=underlying.volatility)\n",
    "    price_up = bsm(bumped_up, option, rate)\n",
    "    price_down = bsm(bumped_down, option, rate)\n",
    "    return (price_up - price_down) / (2 * bump)\n",
    "\n",
    "def gamma(underlying: Equity, option: EquityOption, rate: float) -> float:\n",
    "    bump = 0.01 * underlying.spot\n",
    "    bumped_up = Equity(spot=underlying.spot + bump, \n",
    "                       dividend_yield=underlying.dividend_yield, \n",
    "                       volatility=underlying.volatility)\n",
    "    bumped_down = Equity(spot=underlying.spot - bump, \n",
    "                         dividend_yield=underlying.dividend_yield, \n",
    "                         volatility=underlying.volatility)\n",
    "    original_price = bsm(underlying, option, rate)\n",
    "    price_up = bsm(bumped_up, option, rate)\n",
    "    price_down = bsm(bumped_down, option, rate)\n",
    "    return (price_up - 2 * original_price + price_down) / (bump**2)\n",
    "\n",
    "def fwd(underlying: Equity, forward: EquityForward, rate: float) -> float:\n",
    "    S = underlying.spot\n",
    "    K = forward.strike\n",
    "    T = forward.time_to_maturity\n",
    "    r = rate\n",
    "    q = underlying.dividend_yield\n",
    "    forward_price = S * np.exp((r - q) * T) - K\n",
    "\n",
    "    return forward_price\n",
    "\n",
    "def check_put_call_parity(\n",
    "    underlying: Equity, \n",
    "    call_option: EquityOption, \n",
    "    put_option: EquityOption, \n",
    "    rate: float\n",
    "    ) -> bool:\n",
    "\n",
    "    call_price = bsm(underlying, call_option, rate)\n",
    "    put_price = bsm(underlying, put_option, rate)\n",
    "    S = underlying.spot\n",
    "    K = call_option.strike\n",
    "    T = call_option.time_to_maturity\n",
    "    r = rate\n",
    "    q = underlying.dividend_yield\n",
    "\n",
    "    parity_lhs = call_price - put_price\n",
    "    parity_rhs = S * np.exp(-q * T) - K * np.exp(-r * T)\n",
    "\n",
    "    return np.isclose(parity_lhs, parity_rhs, atol=1e-4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19478579",
   "metadata": {},
   "source": [
    "### Example Usage\n",
    "<p style=\"text-align: justify\">\n",
    "Say, we want to price a call option on an equity with spot price $S_0 = 450$ with dividend yield $q=1.4\\%$, and volatility $14\\%$. The strike price of the call is $K=470$, with time to maturity in years $T=0.23$ and the risk free rate $r = 0.05$.<br>\n",
    "<br>\n",
    "Next, we want to see the asymptotic behavior of the call option if the strike price $K\\rightarrow 0$ with interest rate 0.<br>\n",
    "<br>\n",
    "Next, we want to price a put option on the same equity but strike price $K=500$, time to maturity in years $T=0.26$ and interest rate is 0.<br>\n",
    "<br>\n",
    "Finally, we want to check if the put-call parity relationship is hold. <br>\n",
    "<br>\n",
    "In each case, we consider $h=0.01$ a bump or small change in the stock price.\n",
    "</p> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4347171d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.834035584709966\n",
      "450\n",
      "50.0\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    eq = Equity(450, 0.014, 0.14)\n",
    "    option_call = EquityOption(470, 0.23, \"call\")\n",
    "    option_put = EquityOption(500, 0.26, \"put\")\n",
    "    \n",
    "    print(bsm(eq, option_call, 0.05))  \n",
    "    print(bsm(eq, EquityOption(1e-15, 0.26, \"call\"), 0.0))  \n",
    "    print(bsm(Equity(450, 0.0, 1e-9), option_put, 0.0))  \n",
    "\n",
    "    # Check put-call parity\n",
    "    eq = Equity(450, 0.015, 0.15)\n",
    "    option_call = EquityOption(470, 0.26, \"call\")\n",
    "    option_put = EquityOption(470, 0.26, \"put\")\n",
    "    print(check_put_call_parity(eq, option_call, option_put, 0.05)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "227f7b5c",
   "metadata": {},
   "source": [
    "## References  \n",
    "\n",
    "- Karatzas, I., & Shreve, S. E. (1991). *Brownian Motion and Stochastic Calculus*.  \n",
    "- Options, Futures, and Other Derivatives by John C. Hull  \n",
    "- Arbitrage Theory in Continuous Time Book by Tomas Björk\n",
    "\n",
    "\n",
    "**Share on**  \n",
    "\n",
    "::::{.columns}\n",
    ":::{.column width=\"33%\"}\n",
    "<a href=\"https://www.facebook.com/sharer.php?u=https://mrislambd.github.io/statandprob/posts/optionprice/\" target=\"_blank\" style=\"color:#1877F2; text-decoration: none;\">\n",
    " \n",
    "{{< fa brands facebook size=3x >}}\n",
    "</a>\n",
    " \n",
    ":::\n",
    " \n",
    ":::{.column width=\"33%\"}\n",
    "<a href=\"https://www.linkedin.com/sharing/share-offsite/?url=https://mrislambd.github.io/statandprob/posts/optionprice/\" target=\"_blank\" style=\"color:#0077B5; text-decoration: none;\">\n",
    " \n",
    "{{< fa brands linkedin size=3x >}}\n",
    "</a>\n",
    " \n",
    ":::\n",
    " \n",
    ":::{.column width=\"33%\"}\n",
    "<a href=\"https://www.twitter.com/intent/tweet?url=https://mrislambd.github.io/statandprob/posts/optionprice/\" target=\"_blank\" style=\"color:#1DA1F2; text-decoration: none;\">\n",
    " \n",
    "{{< fa brands twitter size=3x >}}\n",
    "</a>\n",
    " \n",
    ":::\n",
    "::::\n",
    " \n",
    "<script src=\"https://giscus.app/client.js\"\n",
    "        data-repo=\"mrislambd/mrislambd.github.io\" \n",
    "        data-repo-id=\"R_kgDOMV8crA\"\n",
    "        data-category=\"Announcements\"\n",
    "        data-category-id=\"DIC_kwDOMV8crM4CjbQW\"\n",
    "        data-mapping=\"pathname\"\n",
    "        data-strict=\"0\"\n",
    "        data-reactions-enabled=\"1\"\n",
    "        data-emit-metadata=\"0\"\n",
    "        data-input-position=\"bottom\"\n",
    "        data-theme=\"light\"\n",
    "        data-lang=\"en\"\n",
    "        crossorigin=\"anonymous\"\n",
    "        async>\n",
    "</script>\n",
    " \n",
    "<div id=\"fb-root\"></div>\n",
    "<script async defer crossorigin=\"anonymous\"\n",
    " src=\"https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v20.0\"></script>\n",
    "<div class=\"fb-comments\" data-href=\"https://mrislambd.github.io/statandprob/posts/optionprice/\" data-width=\"750\" data-numposts=\"5\"></div>\n",
    "\n",
    "**You may also like**  \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/opt/hostedtoolcache/Python/3.10.18/x64/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
